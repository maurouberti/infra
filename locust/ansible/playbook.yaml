---
- name: Instalação do Servidor
  hosts: all
  vars_files:
    - vars.yaml
  become: true
  tasks:

    - name: 1.1 - Atualizar a lista de pacotes
      ansible.builtin.apt:
        update_cache: true

    - name: 1.2 - Instalar pacotes
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
          - python3-docker # community.docker
          - python3-gitlab # community.general.gitlab_runner
          - unrar
          - git
        state: present

    - name: 1.3 - Instalar pacotes Python
      ansible.builtin.pip:
        name:
          - s3cmd
          - boto3
          - botocore
        break_system_packages: true
        state: present

    - name: 1.4 - Verificar se o arquivo /projeto/docker-compose.yaml existe no droplet
      ansible.builtin.stat:
        path: /projeto/docker-compose.yaml
      register: www_status

    - block:

        - name: 1.5 - Remover pacotes Docker
          ansible.builtin.package:
            name:
              - docker.io
              - docker-doc
              - docker-compose
              - docker-compose-v2
              - podman-docker
              - containerd
              - runc
            state: absent

        - name: 1.6 - Baixar o script de instalacao do Docker
          ansible.builtin.get_url:
            url: https://get.docker.com
            dest: /tmp/get-docker.sh
            mode: "0755"

        - name: 1.7 - Executar o script de instalacao do Docker
          ansible.builtin.shell: sh /tmp/get-docker.sh

      when: not www_status.stat.exists # Executar tarefa apenas se o arquivo /projeto/docker-compose.yaml não existir



    - name: 1.8 - Garantir que a rede externa 'network_projeto' existe
      community.docker.docker_network:
        name: network_projeto
        driver: bridge
        state: present
        # external: true  # Especifica que a rede é externa

    - name: 1.9 - Carregar token do arquivo
      set_fact:
        digitalocean_token: "{{ lookup('file', '../../tokens/doctl-access-token') }}"

    - name: 1.10 - Autenticar no registry do DigitalOcean
      community.docker.docker_login:
        registry_url: "https://registry.digitalocean.com"
        username: "{{ email }}"
        password: "{{ digitalocean_token }}"
      register: docker_login_result

    - name: 1.xx - Verificar sucesso da autenticação
      debug:
        msg: "Autenticação no registry foi bem-sucedida: {{ docker_login_result }}"



    - name: 2.1 - Instalar certbot
      ansible.builtin.apt:
        name:
          - certbot
        state: present
        update_cache: true

    - name: 2.2 - Obter certificado SSL com Certbot em modo standalone
      command: certbot certonly --standalone -d {{ domain }} --non-interactive --agree-tos --email {{ email }}



    - name: 3.1 - Criar diretorios
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "/projeto"
        - "/projeto/apps"
        - "/projeto/apps/www"
        - "/projeto/apps/www/nginx"
        - "/projeto/config"
        - "/projeto/config/nginx"

    - name: 3.2 - Copiar diretorios e arquivos
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "0755"
      loop:
        - { src: "docker-compose.yaml", dest: "/projeto/docker-compose.yaml"}
        - { src: "config/nginx/nginx.conf", dest: "/projeto/config/nginx/nginx.conf"}
        - { src: "config/nginx/locust_1.conf", dest: "/projeto/config/nginx/locust_1.conf"}
        - { src: "config/nginx/locust_2.conf", dest: "/projeto/config/nginx/locust_2.conf"}

    - name: 3.3 - Iniciar containers
      community.docker.docker_compose_v2:
        project_src: "/projeto/"
        files:
          - "/projeto/docker-compose.yaml"
        state: present
